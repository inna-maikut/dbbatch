// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -package dbbatch -typed -destination mock_deps_test.go
//
// Package dbbatch is a generated GoMock package.
package dbbatch

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockBaseConnProvider is a mock of BaseConnProvider interface.
type MockBaseConnProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBaseConnProviderMockRecorder
}

// MockBaseConnProviderMockRecorder is the mock recorder for MockBaseConnProvider.
type MockBaseConnProviderMockRecorder struct {
	mock *MockBaseConnProvider
}

// NewMockBaseConnProvider creates a new mock instance.
func NewMockBaseConnProvider(ctrl *gomock.Controller) *MockBaseConnProvider {
	mock := &MockBaseConnProvider{ctrl: ctrl}
	mock.recorder = &MockBaseConnProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseConnProvider) EXPECT() *MockBaseConnProviderMockRecorder {
	return m.recorder
}

// BaseConn mocks base method.
func (m *MockBaseConnProvider) BaseConn() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseConn")
	ret0, _ := ret[0].(any)
	return ret0
}

// BaseConn indicates an expected call of BaseConn.
func (mr *MockBaseConnProviderMockRecorder) BaseConn() *BaseConnProviderBaseConnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseConn", reflect.TypeOf((*MockBaseConnProvider)(nil).BaseConn))
	return &BaseConnProviderBaseConnCall{Call: call}
}

// BaseConnProviderBaseConnCall wrap *gomock.Call
type BaseConnProviderBaseConnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BaseConnProviderBaseConnCall) Return(arg0 any) *BaseConnProviderBaseConnCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BaseConnProviderBaseConnCall) Do(f func() any) *BaseConnProviderBaseConnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BaseConnProviderBaseConnCall) DoAndReturn(f func() any) *BaseConnProviderBaseConnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBatchRequestsSender is a mock of BatchRequestsSender interface.
type MockBatchRequestsSender struct {
	ctrl     *gomock.Controller
	recorder *MockBatchRequestsSenderMockRecorder
}

// MockBatchRequestsSenderMockRecorder is the mock recorder for MockBatchRequestsSender.
type MockBatchRequestsSenderMockRecorder struct {
	mock *MockBatchRequestsSender
}

// NewMockBatchRequestsSender creates a new mock instance.
func NewMockBatchRequestsSender(ctrl *gomock.Controller) *MockBatchRequestsSender {
	mock := &MockBatchRequestsSender{ctrl: ctrl}
	mock.recorder = &MockBatchRequestsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchRequestsSender) EXPECT() *MockBatchRequestsSenderMockRecorder {
	return m.recorder
}

// SendBatchRequests mocks base method.
func (m *MockBatchRequestsSender) SendBatchRequests(ctx context.Context, requests []Request) (any, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatchRequests", ctx, requests)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendBatchRequests indicates an expected call of SendBatchRequests.
func (mr *MockBatchRequestsSenderMockRecorder) SendBatchRequests(ctx, requests any) *BatchRequestsSenderSendBatchRequestsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatchRequests", reflect.TypeOf((*MockBatchRequestsSender)(nil).SendBatchRequests), ctx, requests)
	return &BatchRequestsSenderSendBatchRequestsCall{Call: call}
}

// BatchRequestsSenderSendBatchRequestsCall wrap *gomock.Call
type BatchRequestsSenderSendBatchRequestsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BatchRequestsSenderSendBatchRequestsCall) Return(res any, close func() error, err error) *BatchRequestsSenderSendBatchRequestsCall {
	c.Call = c.Call.Return(res, close, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BatchRequestsSenderSendBatchRequestsCall) Do(f func(context.Context, []Request) (any, func() error, error)) *BatchRequestsSenderSendBatchRequestsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BatchRequestsSenderSendBatchRequestsCall) DoAndReturn(f func(context.Context, []Request) (any, func() error, error)) *BatchRequestsSenderSendBatchRequestsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBatchRunner is a mock of BatchRunner interface.
type MockBatchRunner struct {
	ctrl     *gomock.Controller
	recorder *MockBatchRunnerMockRecorder
}

// MockBatchRunnerMockRecorder is the mock recorder for MockBatchRunner.
type MockBatchRunnerMockRecorder struct {
	mock *MockBatchRunner
}

// NewMockBatchRunner creates a new mock instance.
func NewMockBatchRunner(ctrl *gomock.Controller) *MockBatchRunner {
	mock := &MockBatchRunner{ctrl: ctrl}
	mock.recorder = &MockBatchRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchRunner) EXPECT() *MockBatchRunnerMockRecorder {
	return m.recorder
}

// Queue mocks base method.
func (m *MockBatchRunner) Queue(request Request) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue", request)
	ret0, _ := ret[0].(any)
	return ret0
}

// Queue indicates an expected call of Queue.
func (mr *MockBatchRunnerMockRecorder) Queue(request any) *BatchRunnerQueueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockBatchRunner)(nil).Queue), request)
	return &BatchRunnerQueueCall{Call: call}
}

// BatchRunnerQueueCall wrap *gomock.Call
type BatchRunnerQueueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BatchRunnerQueueCall) Return(arg0 any) *BatchRunnerQueueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BatchRunnerQueueCall) Do(f func(Request) any) *BatchRunnerQueueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BatchRunnerQueueCall) DoAndReturn(f func(Request) any) *BatchRunnerQueueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockbatchRunnerMachine is a mock of batchRunnerMachine interface.
type MockbatchRunnerMachine struct {
	ctrl     *gomock.Controller
	recorder *MockbatchRunnerMachineMockRecorder
}

// MockbatchRunnerMachineMockRecorder is the mock recorder for MockbatchRunnerMachine.
type MockbatchRunnerMachineMockRecorder struct {
	mock *MockbatchRunnerMachine
}

// NewMockbatchRunnerMachine creates a new mock instance.
func NewMockbatchRunnerMachine(ctrl *gomock.Controller) *MockbatchRunnerMachine {
	mock := &MockbatchRunnerMachine{ctrl: ctrl}
	mock.recorder = &MockbatchRunnerMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbatchRunnerMachine) EXPECT() *MockbatchRunnerMachineMockRecorder {
	return m.recorder
}

// Queue mocks base method.
func (m *MockbatchRunnerMachine) Queue(request Request) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Queue", request)
	ret0, _ := ret[0].(any)
	return ret0
}

// Queue indicates an expected call of Queue.
func (mr *MockbatchRunnerMachineMockRecorder) Queue(request any) *batchRunnerMachineQueueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queue", reflect.TypeOf((*MockbatchRunnerMachine)(nil).Queue), request)
	return &batchRunnerMachineQueueCall{Call: call}
}

// batchRunnerMachineQueueCall wrap *gomock.Call
type batchRunnerMachineQueueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *batchRunnerMachineQueueCall) Return(arg0 any) *batchRunnerMachineQueueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *batchRunnerMachineQueueCall) Do(f func(Request) any) *batchRunnerMachineQueueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *batchRunnerMachineQueueCall) DoAndReturn(f func(Request) any) *batchRunnerMachineQueueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// roundTrip mocks base method.
func (m *MockbatchRunnerMachine) roundTrip() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "roundTrip")
}

// roundTrip indicates an expected call of roundTrip.
func (mr *MockbatchRunnerMachineMockRecorder) roundTrip() *batchRunnerMachineroundTripCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "roundTrip", reflect.TypeOf((*MockbatchRunnerMachine)(nil).roundTrip))
	return &batchRunnerMachineroundTripCall{Call: call}
}

// batchRunnerMachineroundTripCall wrap *gomock.Call
type batchRunnerMachineroundTripCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *batchRunnerMachineroundTripCall) Return() *batchRunnerMachineroundTripCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *batchRunnerMachineroundTripCall) Do(f func()) *batchRunnerMachineroundTripCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *batchRunnerMachineroundTripCall) DoAndReturn(f func()) *batchRunnerMachineroundTripCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// run mocks base method.
func (m *MockbatchRunnerMachine) run(ctx context.Context, b *Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// run indicates an expected call of run.
func (mr *MockbatchRunnerMachineMockRecorder) run(ctx, b any) *batchRunnerMachinerunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockbatchRunnerMachine)(nil).run), ctx, b)
	return &batchRunnerMachinerunCall{Call: call}
}

// batchRunnerMachinerunCall wrap *gomock.Call
type batchRunnerMachinerunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *batchRunnerMachinerunCall) Return(err error) *batchRunnerMachinerunCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *batchRunnerMachinerunCall) Do(f func(context.Context, *Batch) error) *batchRunnerMachinerunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *batchRunnerMachinerunCall) DoAndReturn(f func(context.Context, *Batch) error) *batchRunnerMachinerunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExt is a mock of Ext interface.
type MockExt struct {
	ctrl     *gomock.Controller
	recorder *MockExtMockRecorder
}

// MockExtMockRecorder is the mock recorder for MockExt.
type MockExtMockRecorder struct {
	mock *MockExt
}

// NewMockExt creates a new mock instance.
func NewMockExt(ctrl *gomock.Controller) *MockExt {
	mock := &MockExt{ctrl: ctrl}
	mock.recorder = &MockExtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExt) EXPECT() *MockExtMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockExt) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockExtMockRecorder) ExecContext(ctx, query any, args ...any) *ExtExecContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockExt)(nil).ExecContext), varargs...)
	return &ExtExecContextCall{Call: call}
}

// ExtExecContextCall wrap *gomock.Call
type ExtExecContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtExecContextCall) Return(arg0 sql.Result, arg1 error) *ExtExecContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtExecContextCall) Do(f func(context.Context, string, ...any) (sql.Result, error)) *ExtExecContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtExecContextCall) DoAndReturn(f func(context.Context, string, ...any) (sql.Result, error)) *ExtExecContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContext mocks base method.
func (m *MockExt) GetContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockExtMockRecorder) GetContext(ctx, dest, query any, args ...any) *ExtGetContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockExt)(nil).GetContext), varargs...)
	return &ExtGetContextCall{Call: call}
}

// ExtGetContextCall wrap *gomock.Call
type ExtGetContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtGetContextCall) Return(arg0 error) *ExtGetContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtGetContextCall) Do(f func(context.Context, any, string, ...any) error) *ExtGetContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtGetContextCall) DoAndReturn(f func(context.Context, any, string, ...any) error) *ExtGetContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrepareContext mocks base method.
func (m *MockExt) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockExtMockRecorder) PrepareContext(ctx, query any) *ExtPrepareContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockExt)(nil).PrepareContext), ctx, query)
	return &ExtPrepareContextCall{Call: call}
}

// ExtPrepareContextCall wrap *gomock.Call
type ExtPrepareContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtPrepareContextCall) Return(arg0 *sql.Stmt, arg1 error) *ExtPrepareContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtPrepareContextCall) Do(f func(context.Context, string) (*sql.Stmt, error)) *ExtPrepareContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtPrepareContextCall) DoAndReturn(f func(context.Context, string) (*sql.Stmt, error)) *ExtPrepareContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreparexContext mocks base method.
func (m *MockExt) PreparexContext(ctx context.Context, query string) (*sqlx.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreparexContext", ctx, query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreparexContext indicates an expected call of PreparexContext.
func (mr *MockExtMockRecorder) PreparexContext(ctx, query any) *ExtPreparexContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparexContext", reflect.TypeOf((*MockExt)(nil).PreparexContext), ctx, query)
	return &ExtPreparexContextCall{Call: call}
}

// ExtPreparexContextCall wrap *gomock.Call
type ExtPreparexContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtPreparexContextCall) Return(arg0 *sqlx.Stmt, arg1 error) *ExtPreparexContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtPreparexContextCall) Do(f func(context.Context, string) (*sqlx.Stmt, error)) *ExtPreparexContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtPreparexContextCall) DoAndReturn(f func(context.Context, string) (*sqlx.Stmt, error)) *ExtPreparexContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryContext mocks base method.
func (m *MockExt) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockExtMockRecorder) QueryContext(ctx, query any, args ...any) *ExtQueryContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockExt)(nil).QueryContext), varargs...)
	return &ExtQueryContextCall{Call: call}
}

// ExtQueryContextCall wrap *gomock.Call
type ExtQueryContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtQueryContextCall) Return(arg0 *sql.Rows, arg1 error) *ExtQueryContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtQueryContextCall) Do(f func(context.Context, string, ...any) (*sql.Rows, error)) *ExtQueryContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtQueryContextCall) DoAndReturn(f func(context.Context, string, ...any) (*sql.Rows, error)) *ExtQueryContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryRowContext mocks base method.
func (m *MockExt) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockExtMockRecorder) QueryRowContext(ctx, query any, args ...any) *ExtQueryRowContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockExt)(nil).QueryRowContext), varargs...)
	return &ExtQueryRowContextCall{Call: call}
}

// ExtQueryRowContextCall wrap *gomock.Call
type ExtQueryRowContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtQueryRowContextCall) Return(arg0 *sql.Row) *ExtQueryRowContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtQueryRowContextCall) Do(f func(context.Context, string, ...any) *sql.Row) *ExtQueryRowContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtQueryRowContextCall) DoAndReturn(f func(context.Context, string, ...any) *sql.Row) *ExtQueryRowContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryRowxContext mocks base method.
func (m *MockExt) QueryRowxContext(ctx context.Context, query string, args ...any) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockExtMockRecorder) QueryRowxContext(ctx, query any, args ...any) *ExtQueryRowxContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockExt)(nil).QueryRowxContext), varargs...)
	return &ExtQueryRowxContextCall{Call: call}
}

// ExtQueryRowxContextCall wrap *gomock.Call
type ExtQueryRowxContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtQueryRowxContextCall) Return(arg0 *sqlx.Row) *ExtQueryRowxContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtQueryRowxContextCall) Do(f func(context.Context, string, ...any) *sqlx.Row) *ExtQueryRowxContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtQueryRowxContextCall) DoAndReturn(f func(context.Context, string, ...any) *sqlx.Row) *ExtQueryRowxContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// QueryxContext mocks base method.
func (m *MockExt) QueryxContext(ctx context.Context, query string, args ...any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext.
func (mr *MockExtMockRecorder) QueryxContext(ctx, query any, args ...any) *ExtQueryxContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockExt)(nil).QueryxContext), varargs...)
	return &ExtQueryxContextCall{Call: call}
}

// ExtQueryxContextCall wrap *gomock.Call
type ExtQueryxContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtQueryxContextCall) Return(arg0 *sqlx.Rows, arg1 error) *ExtQueryxContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtQueryxContextCall) Do(f func(context.Context, string, ...any) (*sqlx.Rows, error)) *ExtQueryxContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtQueryxContextCall) DoAndReturn(f func(context.Context, string, ...any) (*sqlx.Rows, error)) *ExtQueryxContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SelectContext mocks base method.
func (m *MockExt) SelectContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockExtMockRecorder) SelectContext(ctx, dest, query any, args ...any) *ExtSelectContextCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockExt)(nil).SelectContext), varargs...)
	return &ExtSelectContextCall{Call: call}
}

// ExtSelectContextCall wrap *gomock.Call
type ExtSelectContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExtSelectContextCall) Return(arg0 error) *ExtSelectContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExtSelectContextCall) Do(f func(context.Context, any, string, ...any) error) *ExtSelectContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExtSelectContextCall) DoAndReturn(f func(context.Context, any, string, ...any) error) *ExtSelectContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
